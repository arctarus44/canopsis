#!/usr/bin/env python
# -*- coding: utf-8 -*-
# --------------------------------
# Copyright (c) 2015 "Capensis" [http://www.capensis.com]
#
# This file is part of Canopsis.
#
# Canopsis is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Canopsis is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Canopsis.  If not, see <http://www.gnu.org/licenses/>.
# ---------------------------------

from argparse import ArgumentParser, FileType

from sys import stdout

from pprint import pprint

from canopsis.common.init import basestring
from canopsis.ctxinfo.manager import CTXInfoManager

# instantiate a new cim manager
cim = CTXInfoManager()

# build argument parser
parser = ArgumentParser(description='Get/Delete context information')
# set operation argument
parser.add_argument(
    '-a', '--action', help='type of action. get (default): retrieve \
        information, del: delete information, count: count number of \
        information, eids: get entity ids.',
    default='get', nargs='?', choices=['get', 'del', 'count', 'eids'],
    dest='action', required=False
)
# set funders argument
parser.add_argument(
    '-f', '--funders', help='funder names (default all)', default=None,
    nargs='*', dest='funders', required=False
)
# set output
parser.add_argument(
    '-o', '--output', help='output file (default stdout)', nargs='?',
    dest='output', default=stdout, required=False, type=FileType('w')
)
# set entity ids argument
parser.add_argument(
    '-e', '--eids', help='entity ids (works with get/del/count action).',
    nargs='*', default=None, dest='entity_ids', required=False
)
# set query argument
parser.add_argument(
    '-q', '--query', help='query argument', nargs='?', default=None, type=dict,
    dest='query', required=False
)
# set method propagation
parser.add_argument(
    '-w', '--withoutchildren',
    help='do not propagate action to children entities (false by default).\
    (works with get/del/count actions).',
    default=True, dest='children', required=False, action='store_false'
)
# set pretty printer output
parser.add_argument(
    '-p', '--pretty', help='use pretty printer on output', default=False,
    dest='pprint', required=False, action='store_true'
)
# set force to delete all entity information
parser.add_argument(
    '--force',
    help='delete all ctx info if eids is not given (false by default). \
    (works with del action).',
    default=False, dest='force', required=False, action='store_true'
)
# parse arguments
args = parser.parse_args()

# choose the right cim operation
operation = cim.get if args.action == 'get' else cim.delete

# build kwargs
kwargs = {
    'funders': args.funders, 'query': args.query
}


def apply_args(actions, nargs):
    """Apply input ``nargs`` names when args.action is in actions.

    :param actions: action(s) when apply args.
    :type actions: str or list
    :param nargs: arg(s) names to apply on kwargs
    :type nargs: str or list.
    """

    # initialize actions and nargs
    if isinstance(actions, basestring):
        actions = [actions]
    if isinstance(nargs, basestring):
        nargs = [nargs]
    # if actions match with args
    if args.action in actions:
        for narg in nargs:  # apply nargs on kwargs
            kwargs[narg] = getattr(args, narg)


# add force
apply_args('del', 'force')

# add eids
apply_args(['get', 'del', 'count'], 'entity_ids')

# apply children
apply_args(['get', 'del', 'count'], 'children')

# execute the operation with arguments
result = cim.get(**kwargs)

# output the result
args.output.write(pprint(result) if args.pprint else str(result))
