#!/usr/bin/env python
# -*- coding: utf-8 -*-
# --------------------------------
# Copyright (c) 2015 "Capensis" [http://www.capensis.com]
#
# This file is part of Canopsis.
#
# Canopsis is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Canopsis is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Canopsis.  If not, see <http://www.gnu.org/licenses/>.
# ---------------------------------

from __future__ import print_function

from canopsis.webcore.webmodulemanager import WebModuleManager
from argparse import ArgumentParser
import sys


class Actions:
    @staticmethod
    def enable(manager, modname):
        if manager.enable_module(modname):
            print('Enabled', modname, 'module')

        else:
            print('Module', modname, 'already registered')

    @staticmethod
    def disable(manager, modname):
        if manager.disable_module(modname):
            print('Removed', modname, 'module')

        else:
            print('Could not disable unregistered module', modname)

    @staticmethod
    def init(manager, *args):
        manager.init_modules()

    @staticmethod
    def clear(manager, *args):
        manager.clear_modules()

    @staticmethod
    def list(manager, *args):
        modules = manager.modules

        for module in modules:
            print(' -', module)


if __name__ == '__main__':
    parser = ArgumentParser(
        description='Canopsis webcore module manager'
    )

    parser.add_argument(
        'action',
        type=str,
        help='What operation to perform on web modules',
        choices=['enable', 'disable', 'list', 'init', 'clear']
    )
    parser.add_argument(
        'module_name',
        type=str,
        help='The module to manage',
        nargs='?'
    )

    args = vars(parser.parse_args())

    if args['action'] in ['enable', 'disable'] and not args['module_name']:
        print('No module name given, aborting operation', file=sys.stderr)
        sys.exit(1)

    action = getattr(Actions, args['action'])
    manager = WebModuleManager()
    action(manager, args['module_name'])
